[{"/Users/meng.yan/workspace/machine-learning-playground/react-handpose-detection/src/index.js":"1","/Users/meng.yan/workspace/machine-learning-playground/react-handpose-detection/src/App.js":"2","/Users/meng.yan/workspace/machine-learning-playground/react-handpose-detection/src/utilities.js":"3"},{"size":219,"mtime":1611370354579,"results":"4","hashOfConfig":"5"},{"size":2031,"mtime":1611370354578,"results":"6","hashOfConfig":"5"},{"size":2149,"mtime":1611370354579,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"1nryj79",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/meng.yan/workspace/machine-learning-playground/react-handpose-detection/src/index.js",[],["16","17"],"/Users/meng.yan/workspace/machine-learning-playground/react-handpose-detection/src/App.js",["18"],"import React, { useRef } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as handpose from \"@tensorflow-models/handpose\";\nimport Webcam from \"react-webcam\";\nimport \"./App.css\";\nimport { drawHand } from \"./utilities\";\n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const loadHandpose = async () => {\n    const net = await handpose.load();\n    console.log(\"handpose model loaded\");\n\n    // Loop and detect hands\n    setInterval(() => {\n      detect(net);\n    }, 100);\n  };\n\n  const detect = async (net) => {\n    if (\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      const video = webcamRef.current.video;\n      const height = webcamRef.current.video.videoHeight;\n      const width = webcamRef.current.video.videoWidth;\n\n      webcamRef.current.video.width = width;\n      webcamRef.current.video.height = height;\n      canvasRef.current.width = width;\n      canvasRef.current.height = height;\n      const hand = await net.estimateHands(video);\n      // console.log(hand);\n\n      const ctx = canvasRef.current.getContext(\"2d\");\n      drawHand(hand, ctx);\n    }\n  };\n\n  loadHandpose();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Webcam\n          ref={webcamRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlgin: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n\n        <canvas\n          ref={canvasRef}\n          style={{\n            position: \"absolute\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            left: 0,\n            right: 0,\n            textAlgin: \"center\",\n            zindex: 9,\n            width: 640,\n            height: 480,\n          }}\n        />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/meng.yan/workspace/machine-learning-playground/react-handpose-detection/src/utilities.js",[],{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":2,"column":13,"nodeType":"25","messageId":"26","endLine":2,"endColumn":15},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-unused-vars","'tf' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]